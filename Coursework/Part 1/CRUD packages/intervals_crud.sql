CREATE OR REPLACE PACKAGE INTERVALS_CRUD AS
    FUNCTION CREATE_INTERVAL(interval_v IN INTERVALS.INTERVAL%TYPE,
                        task_id_v IN INTERVALS.TASK_ID%TYPE, 
                        user_id_v IN INTERVALS.USER_ID%TYPE) RETURN NUMBER; 
                        
    FUNCTION READ_INTERVAL(id_v IN INTERVALS.ID%TYPE) RETURN INTERVALS%ROWTYPE;
     
    PROCEDURE UPDATE_INTERVAL(id_v IN INTERVALS.ID%TYPE,
                        interval_v IN INTERVALS.INTERVAL%TYPE);
                       
    PROCEDURE DELETE_INTERVAL(id_v IN INTERVALS.ID%TYPE);
    
END INTERVALS_CRUD;
/

CREATE OR REPLACE PACKAGE BODY INTERVALS_CRUD AS
    FUNCTION CREATE_INTERVAL(interval_v IN INTERVALS.INTERVAL%TYPE, task_id_v IN INTERVALS.TASK_ID%TYPE, user_id_v IN INTERVALS.USER_ID%TYPE) RETURN NUMBER
    AS
        INTERVAL_id NUMBER := 0;
    BEGIN
        INSERT INTO INTERVALS (INTERVAL, TASK_ID, USER_ID) values (interval_v, task_id_v, user_id_v);
        SELECT INTERVALS_ID_SEQ.CURRVAL INTO INTERVAL_id FROM DUAL;

        RETURN INTERVAL_id;
    END CREATE_INTERVAL;

    FUNCTION READ_INTERVAL(id_v IN INTERVALS.ID%TYPE) RETURN INTERVALS%ROWTYPE
    AS
        INTERVAL INTERVALS%ROWTYPE;
    BEGIN   
        SELECT * into INTERVAL FROM INTERVALS WHERE ID = id_v;
        return INTERVAL;
    END READ_INTERVAL;
      
    PROCEDURE UPDATE_INTERVAL(id_v IN INTERVALS.ID%TYPE, interval_v IN INTERVALS.INTERVAL%TYPE) AS
    BEGIN
        UPDATE INTERVALS
            SET INTERVAL = interval_v
            WHERE ID = id_v;
    END UPDATE_INTERVAL;
     
    PROCEDURE DELETE_INTERVAL(id_v IN INTERVALS.ID%TYPE)
    AS
    BEGIN
        DELETE FROM INTERVALS WHERE ID = id_v;
    END DELETE_INTERVAL;

END INTERVALS_CRUD;
/