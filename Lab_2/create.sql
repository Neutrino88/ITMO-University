/* DROP TABLES, SEQUENCES AND TYPES */
DECLARE
BEGIN
    FOR i IN (SELECT ut.table_name FROM USER_TABLES ut) LOOP
        EXECUTE IMMEDIATE 'drop table '|| i.table_name ||' CASCADE CONSTRAINTS ';
    END LOOP;
      
    FOR i IN (SELECT us.sequence_name FROM USER_SEQUENCES us) LOOP
        EXECUTE IMMEDIATE 'drop sequence '|| i.sequence_name ||'';
    END LOOP;
    
    FOR i IN (SELECT ut.type_name FROM USER_TYPES ut) LOOP
        EXECUTE IMMEDIATE 'drop type '|| i.type_name;
  END LOOP;
END;
/
/* CREATE SEQUENCES */

CREATE SEQUENCE WORK_MODES_SEQ     INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE POSITIONS_SEQ      INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE EMPLOYEES_SEQ      INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE DEPARTMENTS_SEQ    INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE WORK_GRAPHICS_SEQ  INCREMENT BY 1 START WITH 1;

/* CREATE TABLES */
CREATE TABLE WORK_MODES (
    ID INT NOT NULL,
    NAME VARCHAR(100) NOT NULL,
    SHORT_NAME VARCHAR(10),
    
    CONSTRAINT WORK_MODES_ID_PK PRIMARY KEY (ID)
);

CREATE TABLE POSITIONS (
    ID INT NOT NULL,
    WORK_MODE_ID INT NOT NULL,
    NAME VARCHAR(100) NOT NULL,
    SHORT_NAME VARCHAR(10),
    SALARY NUMBER(6) NOT NULL CHECK(SALARY > 0),
    
    CONSTRAINT POSITIONS_ID_PK PRIMARY KEY (ID),
    CONSTRAINT POSITIONS_FK1 FOREIGN KEY (WORK_MODE_ID) REFERENCES WORK_MODES(ID)
);

CREATE TABLE EMPLOYEES (
    ID INT NOT NULL,
    LAST_NAME VARCHAR(30) NOT NULL,
    FIRST_NAME VARCHAR(30) NOT NULL,
    PATRONYMIC VARCHAR(30) NOT NULL,
    SEX CHAR(1) NOT NULL CHECK(SEX IN ('M','F')),
    BIRTHDAY DATE NOT NULL,
    BIRTHPLACE VARCHAR(255),
    ADDRESS VARCHAR(255),
    PHONE NUMBER(12) NOT NULL,
    
    CONSTRAINT EMPLOYEES_PK PRIMARY KEY (ID)
);

CREATE TABLE DEPARTMENTS (
    ID INT NOT NULL,
    NAME VARCHAR(100) NOT NULL,
    SHORT_NAME VARCHAR(10),
    DEPART_NUMBER VARCHAR(10) UNIQUE NOT NULL,
    CHARACTERISTIC VARCHAR(255),
    
    CONSTRAINT DEPARTMENTS_PK PRIMARY KEY(ID)
);

CREATE TYPE DAY_TYPE AS OBJECT (
    DAY_VAL VARCHAR(20),
    
    CONSTRUCTOR FUNCTION DAY_TYPE (DAY_VAL VARCHAR)
    RETURN SELF AS RESULT
);
/

CREATE OR REPLACE TYPE BODY DAY_TYPE AS
    CONSTRUCTOR FUNCTION DAY_TYPE (DAY_VAL VARCHAR) RETURN SELF AS RESULT AS
    BEGIN
        IF (DAY_VAL = 'holiday' OR DAY_VAL = 'work day' OR DAY_VAL = 'celebrate'
         OR DAY_VAL = 'weekend' OR DAY_VAL = 'sick day' OR DAY_VAL = 'bisiness trip') THEN
            SELF.DAY_VAL := DAY_VAL;
            RETURN;
        END IF;
            raise_application_error (-1,'The day value must be one of the ''holiday'', ''weekend'', ''work day'', ''celebrate'', ''sick day'', ''bisiness trip''!');
    RETURN;
  END;
END;
/

CREATE TABLE WORK_GRAPHICS (
    ID INT NOT NULL,
    EMPLOYEE_ID INT NOT NULL,
    DEPART_ID INT NOT NULL, 
    POSITION_ID INT NOT NULL,
    WORK_MONTH DATE NOT NULL,
    HOURS_NUMBER INT NOT NULL CHECK(HOURS_NUMBER >= 0 AND HOURS_NUMBER <= 774),
    DAY_1 DAY_TYPE NOT NULL,
    DAY_2 DAY_TYPE NOT NULL,
    DAY_3 DAY_TYPE NOT NULL,
    DAY_4 DAY_TYPE NOT NULL,
    DAY_5 DAY_TYPE NOT NULL,
    DAY_6 DAY_TYPE NOT NULL,
    DAY_7 DAY_TYPE NOT NULL,
    DAY_8 DAY_TYPE NOT NULL,
    DAY_9 DAY_TYPE NOT NULL,
    DAY_10 DAY_TYPE NOT NULL,
    DAY_11 DAY_TYPE NOT NULL,
    DAY_12 DAY_TYPE NOT NULL,
    DAY_13 DAY_TYPE NOT NULL,
    DAY_14 DAY_TYPE NOT NULL,
    DAY_15 DAY_TYPE NOT NULL,
    DAY_16 DAY_TYPE NOT NULL,
    DAY_17 DAY_TYPE NOT NULL,
    DAY_18 DAY_TYPE NOT NULL,
    DAY_19 DAY_TYPE NOT NULL,
    DAY_20 DAY_TYPE NOT NULL,
    DAY_21 DAY_TYPE NOT NULL,
    DAY_22 DAY_TYPE NOT NULL,
    DAY_23 DAY_TYPE NOT NULL,
    DAY_24 DAY_TYPE NOT NULL,
    DAY_25 DAY_TYPE NOT NULL,
    DAY_26 DAY_TYPE NOT NULL,
    DAY_27 DAY_TYPE NOT NULL,
    DAY_28 DAY_TYPE NOT NULL,
    DAY_29 DAY_TYPE NOT NULL,
    DAY_30 DAY_TYPE NOT NULL,
    DAY_31 DAY_TYPE NOT NULL,
    
    CONSTRAINT WORK_GRAPHICS_PK PRIMARY KEY(ID),
    CONSTRAINT WORK_GRAPHICS_FK1 FOREIGN KEY(EMPLOYEE_ID) REFERENCES WORK_MODES(ID),
    CONSTRAINT WORK_GRAPHICS_FK2 FOREIGN KEY(DEPART_ID) REFERENCES DEPARTMENTS(ID),
    CONSTRAINT WORK_GRAPHICS_FK3 FOREIGN KEY(POSITION_ID) REFERENCES POSITIONS(ID)
);

/* CREATE TRIGGERS */

CREATE OR REPLACE TRIGGER WORK_MODES_TR
BEFORE INSERT ON WORK_MODES
FOR EACH ROW
BEGIN
  :new.id := WORK_MODES_SEQ.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER WORK_GRAPHICS_TR
BEFORE INSERT ON WORK_GRAPHICS
FOR EACH ROW
BEGIN
  :NEW.ID :=  WORK_GRAPHICS_SEQ.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER POSITIONS_TR
BEFORE INSERT ON POSITIONS
FOR EACH ROW
BEGIN
  :new.ID := POSITIONS_SEQ.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER EMPLOYEES_TR
BEFORE INSERT ON EMPLOYEES
FOR EACH ROW
BEGIN
  :new.ID := EMPLOYEES_SEQ.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER DEPARTMENTS_TR
BEFORE INSERT ON DEPARTMENTS
FOR EACH ROW
BEGIN
  :new.ID := DEPARTMENTS_SEQ.NEXTVAL;
END;
/
